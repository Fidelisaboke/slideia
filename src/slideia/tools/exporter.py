"""
Exporter module for the slideia package.
"""

import datetime
import json
import os
import sys

from pptx import Presentation
from pptx.dml.color import RGBColor
from pptx.util import Pt


def export_slides(input_path: str, output_path: str):
    """
    Export slides from a JSON file (input_path) to a PowerPoint (.pptx) file (output_path), using a
    professional template.

    Accessibility: All images are assigned alt-text (from image_prompt) for screen readers.
    If image insertion fails, a text placeholder is used instead. All logs are sent to stderr to
    avoid interfering with content.

    The input JSON should have the structure:
        {
            "title": str,
            "subtitle": str (optional),
            "slides": [
                {
                    "title": str,
                    "summary": str,
                    "bullets": [str, ...],
                    "image_path": str (optional),
                    "image_prompt": str (optional, for alt text),
                    "theme": dict (optional, e.g. {"font": "Arial", "color": "#112233"})
                },
                ...
            ]
        }

    Args:
        input_path (str): Path to the input JSON file describing the deck.
        output_path (str): Path to the output .pptx file.
    """

    if not os.path.exists(input_path):
        print(f"[exporter] Input file not found: {input_path}", file=sys.stderr)
        raise FileNotFoundError(f"Input file not found: {input_path}")

    # Use the minimal professional template
    template_path = os.path.join(os.path.dirname(__file__), "templates", "base_template.pptx")
    if not os.path.exists(template_path):
        print(f"[exporter] Template not found: {template_path}", file=sys.stderr)
        raise FileNotFoundError(f"Template not found: {template_path}")

    with open(input_path, 'r', encoding='utf-8') as f:
        data = json.load(f)

    prs = Presentation(template_path)

    # Remove all slides from the template to avoid duplicates in output
    while len(prs.slides) > 0:
        rId = prs.slides._sldIdLst[0].rId
        prs.part.drop_rel(rId)
        del prs.slides._sldIdLst[0]

    # Title slide (use first layout)
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = data.get('title', 'Untitled Presentation')
    if len(slide.placeholders) > 1:
        subtitle = data.get('subtitle', 'Generated by slideia exporter')
        slide.placeholders[1].text = subtitle

    # Content slides
    content_layout = prs.slide_layouts[1]
    for s in data.get('slides', []):
        content_slide = prs.slides.add_slide(content_layout)
        # Title
        content_slide.shapes.title.text = s.get('title', 'Slide')
        # Bullets and summary
        content = s.get('summary', '')
        bullets = s.get('bullets', [])
        text = content
        if bullets:
            text += '\n' + '\n'.join(f"â€¢ {b}" for b in bullets)
        # Find the first body placeholder
        body_ph = None
        for shape in content_slide.placeholders:
            if shape.placeholder_format.type == 1:  # BODY
                body_ph = shape
                break
        if body_ph:
            body_ph.text = text.strip()
            # Apply theme formatting if present
            theme = s.get('theme', {})
            for paragraph in body_ph.text_frame.paragraphs:
                if 'font' in theme:
                    paragraph.font.name = theme['font']
                if 'color' in theme:
                    try:
                        rgb = theme['color'].lstrip('#')
                        paragraph.font.color.rgb = RGBColor(
                            int(rgb[0:2], 16),
                            int(rgb[2:4], 16),
                            int(rgb[4:6], 16)
                        )
                    except Exception:
                        pass

        # Insert image if provided, with accessibility and fallback
        image_path = s.get('image_path')
        image_prompt = s.get('image_prompt', '')
        if image_path and os.path.exists(image_path):
            try:
                # Try to find a picture placeholder, else insert at a default position
                pic_placeholder = None
                for shape in content_slide.placeholders:
                    if shape.placeholder_format.type == 18:  # PICTURE
                        pic_placeholder = shape
                        break
                if pic_placeholder:
                    pic = pic_placeholder.insert_picture(image_path)
                else:
                    # Insert at default position (right side)
                    left = content_slide.shapes.title.left + content_slide.shapes.title.width + Pt(20)
                    top = Pt(120)
                    width = Pt(200)
                    pic = content_slide.shapes.add_picture(image_path, left, top, width=width)
                # Set alt text for accessibility
                if pic:
                    pic.alt_text = image_prompt or "Slide image"
            except Exception as e:
                print(f"[exporter] Image insert failed: {e}. Using placeholder for alt-text.", file=sys.stderr)
                left = content_slide.shapes.title.left + content_slide.shapes.title.width + Pt(20)
                top = Pt(120)
                width = Pt(200)
                height = Pt(120)
                shape = content_slide.shapes.add_shape(1, left, top, width, height)  # Rectangle
                shape.text = "[Image: " + image_prompt + "]"
                shape.alt_text = image_prompt
        elif image_prompt:
            # No image, but prompt present: add a shape with alt text as a placeholder
            left = content_slide.shapes.title.left + content_slide.shapes.title.width + Pt(20)
            top = Pt(120)
            width = Pt(200)
            height = Pt(120)
            shape = content_slide.shapes.add_shape(1, left, top, width, height)  # Rectangle
            shape.text = "[Image: " + image_prompt + "]"
            shape.alt_text = image_prompt

    prs.save(output_path)
    print(f"[exporter] Exported slides to {output_path}", file=sys.stderr)


def generate_pptx(topic: str, slides: int = 5) -> str:
    """
    Generate a PowerPoint (.pptx) file with a title slide and content slides.

    Args:
        topic (str): The topic/title for the presentation.
        slides (int, optional): Number of content slides to generate. Defaults to 5.

    Returns:
        str: The filename of the generated .pptx deck.
    """

    prs = Presentation()

    # Title slide
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = topic
    slide.placeholders[1].text = f"Generated by slideia on {datetime.date.today()}"

    # Content slides
    content_layout = prs.slide_layouts[1]
    for i in range(1, slides + 1):
        content_slide = prs.slides.add_slide(content_layout)
        content_slide.shapes.title.text = f"{topic} - Slide {i}"
        content_slide.placeholders[1].text = f"Content for slide {i}."

    filename = f"{topic.replace(' ', '_').lower()}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.pptx"
    prs.save(filename)
    return filename
